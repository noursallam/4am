---
import Container from "../shared/Container.astro";
import Title from "../shared/Title.astro";
import Paragraph from "../shared/Paragraph.astro";
import { sliderServices } from "../../utils/sliderData.ts";
---

<section id="our-services" class="py-20 bg-gray-50 dark:bg-gray-800">
    <Container className="space-y-10">
        <div class="text-center max-w-3xl mx-auto space-y-4" data-aos="fade-up">
            <Title>
                مجالات خدماتنا
            </Title>
            <Paragraph className="text-lg">
                نقدم مجموعة متكاملة من الخدمات الإبداعية لمساعدتك في تحقيق رؤيتك التسويقية
            </Paragraph>
        </div>

        <!-- Services Slider -->
        <div class="relative overflow-hidden" data-aos="fade-up" data-aos-delay="200">
            <!-- Mobile Slider (Scrollable) -->
            <div class="md:hidden flex overflow-x-auto pb-6 snap-x snap-mandatory scrollbar-hide gap-6" id="mobile-slider">
                {sliderServices.map((service, index) => (
                    <div class="min-w-[85%] snap-center" data-aos="fade-up" data-aos-delay={100 + (index * 50)}>
                        <div class="bg-white dark:bg-gray-900 rounded-2xl overflow-hidden shadow-lg h-full">
                            <div class="aspect-[4/3] overflow-hidden">
                                <img 
                                    src={service.mobileImage || service.desktopImage} 
                                    alt={service.title}
                                    class="w-full h-full object-cover"
                                    loading="lazy"
                                />
                            </div>
                            <div class="p-6">
                                <h3 class="text-xl font-bold mb-3 text-heading-2">{service.title}</h3>
                                <p class="text-gray-700 dark:text-gray-300">{service.description}</p>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            <!-- Desktop Slider (Full-screen Images) -->
            <div class="hidden md:block relative" id="desktop-slider">
                {sliderServices.map((service, index) => (
                    <div 
                        class={`service-slide absolute inset-0 transition-opacity duration-500 ${index === 0 ? 'opacity-100 z-10' : 'opacity-0 z-0'}`} 
                        data-index={index}
                    >
                        <div class="rounded-2xl overflow-hidden shadow-lg h-full">
                            <div class="aspect-video w-full">
                                <img 
                                    src={service.desktopImage || service.mobileImage} 
                                    alt={service.title}
                                    class="w-full h-full object-cover"
                                    loading={index === 0 ? "eager" : "lazy"}
                                />
                            </div>
                            <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6 text-white">
                                <h3 class="text-2xl font-bold mb-2">{service.title}</h3>
                                <p class="text-white/90 max-w-xl">{service.description}</p>
                            </div>
                        </div>
                    </div>
                ))}
                
                <!-- Desktop Navigation Arrows -->
                <button class="absolute top-1/2 -translate-y-1/2 left-4 z-20 bg-white dark:bg-gray-900 p-2 rounded-full shadow-lg text-primary opacity-75 hover:opacity-100 transition-opacity" id="prev-slide" aria-label="Previous slide">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 rtl:rotate-180">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
                    </svg>
                </button>
                <button class="absolute top-1/2 -translate-y-1/2 right-4 z-20 bg-white dark:bg-gray-900 p-2 rounded-full shadow-lg text-primary opacity-75 hover:opacity-100 transition-opacity" id="next-slide" aria-label="Next slide">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 rtl:rotate-180">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
                    </svg>
                </button>
                
                <!-- Desktop Pagination Dots -->
                <div class="flex justify-center mt-6 gap-2 relative z-20">
                    {sliderServices.map((_, index) => (
                        <button 
                            class={`w-3 h-3 rounded-full transition-colors duration-300 ${index === 0 ? 'bg-primary' : 'bg-primary/30'}`} 
                            data-index={index} 
                            aria-label={`Go to slide ${index + 1}`}
                            id={`desktop-indicator-${index}`}
                        ></button>
                    ))}
                </div>
            </div>

            <!-- Mobile Navigation Dots -->
            <div class="flex justify-center mt-6 gap-2 md:hidden">
                {sliderServices.map((_, index) => (
                    <button class="w-3 h-3 rounded-full bg-primary/30 mobile-indicator" data-index={index} aria-label={`Go to slide ${index + 1}`}></button>
                ))}
            </div>
        </div>
    </Container>
</section>

<style>
    /* Hide scrollbar but keep functionality */
    .scrollbar-hide {
        -ms-overflow-style: none;  /* IE and Edge */
        scrollbar-width: none;  /* Firefox */
    }
    .scrollbar-hide::-webkit-scrollbar {
        display: none; /* Chrome, Safari, Opera */
    }
    
    /* Set fixed height for the desktop slider container */
    #desktop-slider {
        height: 500px;
        position: relative;
    }
    
    /* Ensure the mobile indicator for the first slide is active by default */
    .mobile-indicator:first-child {
        @apply bg-primary;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Mobile slider functionality
        const mobileSlider = document.getElementById('mobile-slider');
        const mobileIndicators = document.querySelectorAll('.mobile-indicator');
        
        if (mobileSlider && mobileIndicators.length) {
            // Update indicators based on scroll position
            mobileSlider.addEventListener('scroll', () => {
                const slideWidth = mobileSlider.scrollWidth / mobileIndicators.length;
                const currentIndex = Math.round(mobileSlider.scrollLeft / slideWidth);
                
                mobileIndicators.forEach((indicator, index) => {
                    if (index === currentIndex) {
                        indicator.classList.add('bg-primary');
                        indicator.classList.remove('bg-primary/30');
                    } else {
                        indicator.classList.remove('bg-primary');
                        indicator.classList.add('bg-primary/30');
                    }
                });
            });
            
            // Click on indicator to scroll to that slide
            mobileIndicators.forEach((indicator, index) => {
                indicator.addEventListener('click', () => {
                    const slideWidth = mobileSlider.scrollWidth / mobileIndicators.length;
                    mobileSlider.scrollTo({
                        left: slideWidth * index,
                        behavior: 'smooth'
                    });
                });
            });
        }
        
        // Desktop slider functionality
        const desktopSlider = document.getElementById('desktop-slider');
        const slides = document.querySelectorAll('.service-slide');
        const prevButton = document.getElementById('prev-slide');
        const nextButton = document.getElementById('next-slide');
        
        if (desktopSlider && slides.length > 0) {
            let currentSlide = 0;
            const totalSlides = slides.length;
            
            // Function to update active slide
            const goToSlide = (index) => {
                // Hide all slides
                slides.forEach((slide) => {
                    slide.classList.remove('opacity-100', 'z-10');
                    slide.classList.add('opacity-0', 'z-0');
                });
                
                // Show current slide
                slides[index].classList.remove('opacity-0', 'z-0');
                slides[index].classList.add('opacity-100', 'z-10');
                
                // Update indicators
                for (let i = 0; i < totalSlides; i++) {
                    const indicator = document.getElementById(`desktop-indicator-${i}`);
                    if (i === index) {
                        indicator.classList.remove('bg-primary/30');
                        indicator.classList.add('bg-primary');
                    } else {
                        indicator.classList.remove('bg-primary');
                        indicator.classList.add('bg-primary/30');
                    }
                }
                
                // Update current slide index
                currentSlide = index;
            };
            
            // Next slide button
            if (nextButton) {
                nextButton.addEventListener('click', () => {
                    goToSlide((currentSlide + 1) % totalSlides);
                });
            }
            
            // Previous slide button
            if (prevButton) {
                prevButton.addEventListener('click', () => {
                    goToSlide((currentSlide - 1 + totalSlides) % totalSlides);
                });
            }
            
            // Indicator buttons
            for (let i = 0; i < totalSlides; i++) {
                const indicator = document.getElementById(`desktop-indicator-${i}`);
                indicator.addEventListener('click', () => {
                    goToSlide(i);
                });
            }
            
            // Auto-advance slides every 5 seconds
            let slideInterval = setInterval(() => {
                goToSlide((currentSlide + 1) % totalSlides);
            }, 5000);
            
            // Pause auto-advance on hover
            desktopSlider.addEventListener('mouseenter', () => {
                clearInterval(slideInterval);
            });
            
            // Resume auto-advance when mouse leaves
            desktopSlider.addEventListener('mouseleave', () => {
                slideInterval = setInterval(() => {
                    goToSlide((currentSlide + 1) % totalSlides);
                }, 5000);
            });
        }
    });
</script>
